require "rails_helper"

RSpec.describe Identity::PasswordResetsController, type: :request do
  fixtures :users
  let(:user) { users(:lazaro_nixon) }

  describe "GET #new" do
    it "returns HTTP success" do
      get new_identity_password_reset_url

      expect(response).to have_http_status(:success)
    end
  end

  describe "GET #edit" do
    let(:sid) { user.generate_token_for(:password_reset) }

    it "returns HTTP success" do
      get edit_identity_password_reset_url(sid: sid)

      expect(response).to have_http_status(:success)
    end
  end

  describe "POST #create" do
    context "with a valid email" do
      it "sends a password reset email" do
        expect {
          post identity_password_reset_url, params: { email: user.email }
        }.to have_enqueued_mail(UserMailer, :password_reset)

        expect(response).to redirect_to(sign_in_url)
      end
    end

    context "with a nonexistent email" do
      it "does not send a password reset email" do
        expect {
          post identity_password_reset_url, params: { email: "invalid_email@hey.com" }
        }.to_not have_enqueued_mail(UserMailer, :password_reset)

        expect(response).to redirect_to(new_identity_password_reset_url)
        expect(flash[:alert]).to eq("You can't reset your password until you verify your email")
      end
    end

    context "with an unverified email" do
      it "does not send a password reset email" do
        user.update!(verified: false)

        expect {
          post identity_password_reset_url, params: { email: user.email }
        }.to_not have_enqueued_mail(UserMailer, :password_reset)

        expect(response).to redirect_to(new_identity_password_reset_url)
        expect(flash[:alert]).to eq("You can't reset your password until you verify your email")
      end
    end
  end

  describe "PATCH #update" do
    let!(:sid) { user.generate_token_for(:password_reset) }

    context "with a valid token" do
      it "updates the password" do
        patch identity_password_reset_url, params: { sid: sid, password: "Secret6*4*2*", password_confirmation: "Secret6*4*2*" }

        expect(response).to redirect_to(sign_in_url)
      end
    end

    context "with an expired token" do
      it "does not update the password" do
        travel 30.minutes

        patch identity_password_reset_url, params: { sid: sid, password: "Secret6*4*2*", password_confirmation: "Secret6*4*2*" }

        expect(response).to redirect_to(new_identity_password_reset_url)
        expect(flash[:alert]).to eq("That password reset link is invalid")
      end
    end
  end
end
